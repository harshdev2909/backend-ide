#!/bin/bash

set -e

# Function to log messages
log() {
    echo "{\"type\": \"info\", \"message\": \"$1\", \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)\"}"
}

error() {
    echo "{\"type\": \"error\", \"message\": \"$1\", \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)\"}"
}

success() {
    echo "{\"type\": \"success\", \"message\": \"$1\", \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)\"}"
}

# Check if project directory exists
if [ ! -d "/workspace/project" ]; then
    error "Project directory not found"
    exit 1
fi

cd /workspace/project

# Check for required files
if [ ! -f "Cargo.toml" ]; then
    error "Cargo.toml not found"
    exit 1
fi

if [ ! -f "src/lib.rs" ] && [ ! -f "lib.rs" ]; then
    error "lib.rs not found"
    exit 1
fi

# Create src directory if it doesn't exist
mkdir -p src

# Create .cargo directory and config if it doesn't exist
mkdir -p .cargo
if [ ! -f ".cargo/config.toml" ]; then
    cat > .cargo/config.toml << EOF
[target.wasm32v1-none]
rustflags = [
    "-C", "target-feature=-crt-static",
    "-C", "link-arg=--no-entry"
]
EOF
fi

# Move lib.rs to src/ if it's in root
if [ -f "lib.rs" ] && [ ! -f "src/lib.rs" ]; then
    mv lib.rs src/
fi

log "Starting Rust compilation..."

# Check Rust toolchain
log "Checking Rust toolchain..."
rustc --version
cargo --version

# Clean previous builds
log "Cleaning previous builds..."
cargo clean

# Update dependencies
log "Updating dependencies..."
cargo update

# Set environment variables for better compatibility
export RUSTFLAGS="-C target-feature=-crt-static"

# Determine the correct target based on Rust version
RUST_VERSION=$(rustc --version | cut -d' ' -f2 | cut -d'.' -f1,2)
log "Rust version: $RUST_VERSION"

# Use wasm32v1-none for Rust 1.85.0+ or wasm32-unknown-unknown for older versions
if [ "$RUST_VERSION" = "1.85" ] || [ "$RUST_VERSION" = "1.86" ] || [ "$RUST_VERSION" = "1.87" ] || [ "$RUST_VERSION" = "1.88" ]; then
    TARGET="wasm32v1-none"
    log "Using target: $TARGET (Rust 1.85.0+)"
else
    TARGET="wasm32-unknown-unknown"
    log "Using target: $TARGET (older Rust version)"
fi

# Ensure the target is installed
log "Installing target: $TARGET"
rustup target add $TARGET

# Use soroban contract build instead of cargo build
log "Building with soroban contract build..."
if command -v soroban &> /dev/null; then
    # Use soroban contract build
    soroban contract build
    log "Soroban build completed"
    
    # Find the generated WASM file
    WASM_FILE=$(find target -name "*.wasm" | head -1)
    
    if [ -z "$WASM_FILE" ]; then
        error "WASM file not generated by soroban contract build"
        exit 1
    fi
    
    # Get WASM file size
    WASM_SIZE=$(stat -c%s "$WASM_FILE")
    WASM_SIZE_KB=$((WASM_SIZE / 1024))
    
    log "WASM file generated: $(basename "$WASM_FILE")"
    log "WASM size: ${WASM_SIZE_KB} KB"
    
    # Copy WASM file to output directory
    mkdir -p /workspace/output
    cp "$WASM_FILE" /workspace/output/contract.wasm
    
else
    # Fallback to cargo build if soroban is not available
    log "Soroban CLI not available, falling back to cargo build..."
    cargo build --target $TARGET --release --verbose
    
    # Check if WASM file was generated
    WASM_FILE=$(find target/$TARGET/release -name "*.wasm" | head -1)
    
    if [ -z "$WASM_FILE" ]; then
        error "WASM file not generated"
        exit 1
    fi
    
    # Get WASM file size
    WASM_SIZE=$(stat -c%s "$WASM_FILE")
    WASM_SIZE_KB=$((WASM_SIZE / 1024))
    
    log "WASM file generated: $(basename "$WASM_FILE")"
    log "WASM size: ${WASM_SIZE_KB} KB"
    
    # Copy WASM file to output directory
    mkdir -p /workspace/output
    cp "$WASM_FILE" /workspace/output/contract.wasm
    
    # Also copy the main WASM file (not just deps)
    MAIN_WASM=$(find target/$TARGET/release -name "*.wasm" | grep -v deps | head -1)
    if [ -n "$MAIN_WASM" ]; then
        cp "$MAIN_WASM" /workspace/output/contract.wasm
    fi
fi

# Optional: Optimize the WASM file if stellar CLI is available
if command -v stellar &> /dev/null; then
    log "Optimizing WASM file..."
    OPTIMIZED_WASM="/workspace/output/contract.optimized.wasm"
    if stellar contract optimize --wasm /workspace/output/contract.wasm --output $OPTIMIZED_WASM; then
        log "WASM file optimized successfully"
        # Use the optimized file
        cp $OPTIMIZED_WASM /workspace/output/contract.wasm
    else
        log "Could not optimize WASM file, using original"
    fi
else
    log "Stellar CLI not available, skipping optimization"
fi

success "Compilation successful! WASM file generated."

# Output the WASM file path for the API
echo "WASM_FILE_PATH=/workspace/output/contract.wasm" 