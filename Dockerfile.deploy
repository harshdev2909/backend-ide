# Multi-stage build to optimize memory usage
FROM rust:1.85-slim as rust-builder

# Install system dependencies for Rust compilation
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    pkg-config \
    libssl-dev \
    libdbus-1-dev \
    libudev-dev \
    libusb-1.0-0-dev \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Install wasm32v1 target
RUN rustup target add wasm32v1-none

# Install Soroban CLI using the official install script
RUN curl -sSfL https://soroban.stellar.org/install.sh | sh

# Install Stellar CLI with memory optimization
RUN export CARGO_NET_GIT_FETCH_WITH_CLI=true && \
    export RUSTFLAGS="-C target-cpu=native" && \
    cargo install --locked --git https://github.com/stellar/stellar-cli stellar-cli --bin stellar --jobs 1

# Final stage with Node.js
FROM node:18-alpine

# Install system dependencies
RUN apk add --no-cache \
    docker \
    curl \
    bash \
    build-base \
    pkgconfig \
    openssl-dev \
    rust \
    cargo \
    dbus-dev \
    pkgconf \
    eudev-dev \
    libusb-dev

# Install rustup
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH="/root/.cargo/bin:$PATH"

# Install wasm32v1 target
RUN rustup target add wasm32v1-none

# Copy Soroban CLI from rust-builder
COPY --from=rust-builder /usr/local/bin/soroban /usr/local/bin/soroban

# Copy Stellar CLI from rust-builder
COPY --from=rust-builder /usr/local/cargo/bin/stellar /usr/local/bin/stellar

# Create app directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci --only=production

# Copy app source
COPY . .

# Create necessary directories
RUN mkdir -p /app/temp /app/logs

# Expose port
EXPOSE 3001

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3001/api/health || exit 1

# Start the application
CMD ["npm", "start"] 